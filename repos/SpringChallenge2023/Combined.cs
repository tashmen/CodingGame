/*
 * File generated by SourceCombiner.exe using 8 source files.
 * Created On: 5/29/2023 3:02:27 PM
*/
using Algorithms.GameComponent;
using Algorithms.Graph;
using GameSolution.Entities;
using GameSolution.Game;
using Node = Algorithms.Graph.Node;
using static Algorithms.Graph.GraphLinks;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
//*** SourceCombiner -> original file Player.cs ***
/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Player
{
    static void Main(string[] args)
    {
        Board board = new Board();
        GameState gameState = new GameState();
        string[] inputs;
        int numberOfCells = int.Parse(Console.ReadLine()); // amount of hexagonal cells in this map
        List<Cell> cells = new List<Cell>(numberOfCells);
        for (int i = 0; i < numberOfCells; i++)
        {
            inputs = Console.ReadLine().Split(' ');
            int type = int.Parse(inputs[0]); // 0 for empty, 1 for eggs, 2 for crystal
            int initialResources = int.Parse(inputs[1]); // the initial amount of eggs/crystals on this cell
            int neigh0 = int.Parse(inputs[2]); // the index of the neighbouring cell for each direction
            int neigh1 = int.Parse(inputs[3]);
            int neigh2 = int.Parse(inputs[4]);
            int neigh3 = int.Parse(inputs[5]);
            int neigh4 = int.Parse(inputs[6]);
            int neigh5 = int.Parse(inputs[7]);
            cells.Add(new Cell(i, (ResourceType)type, initialResources, new List<int>() { neigh0, neigh1, neigh2, neigh3, neigh4, neigh5 }));
        }
        board.SetCells(cells);
        int numberOfBases = int.Parse(Console.ReadLine());
        inputs = Console.ReadLine().Split(' ');
        for (int i = 0; i < numberOfBases; i++)
        {
            int myBaseIndex = int.Parse(inputs[i]);
            board.GetCell(myBaseIndex).SetBaseType(BaseType.MyBase);
        }
        inputs = Console.ReadLine().Split(' ');
        for (int i = 0; i < numberOfBases; i++)
        {
            int oppBaseIndex = int.Parse(inputs[i]);
            board.GetCell(oppBaseIndex).SetBaseType(BaseType.OppBase);
        }
        // game loop
        while (true)
        {
            for (int i = 0; i < numberOfCells; i++)
            {
                inputs = Console.ReadLine().Split(' ');
                int resources = int.Parse(inputs[0]); // the current amount of eggs/crystals on this cell
                int myAnts = int.Parse(inputs[1]); // the amount of your ants on this cell
                int oppAnts = int.Parse(inputs[2]); // the amount of opponent ants on this cell
                var cell = board.GetCell(i);
                cell.SetAnts(myAnts, oppAnts);
                cell.SetResource(resources);
                Console.Error.WriteLine(cell.ToString());
            }
            // Write an action using Console.WriteLine()
            // To debug: Console.Error.WriteLine("Debug messages...");
            Stopwatch watch = new Stopwatch();
            watch.Start();
            gameState.SetNextTurn(board);
            GameHelper gameHelper = new GameHelper(gameState);
            Move move = gameHelper.GetMove();
            Console.Error.WriteLine($"ms: {watch.ElapsedMilliseconds}");
            // WAIT | LINE <sourceIdx> <targetIdx> <strength> | BEACON <cellIdx> <strength> | MESSAGE <text>
            Console.WriteLine(move);
        }
    }
}
//*** SourceCombiner -> original file Combined.cs ***
/*
 * File generated by SourceCombiner.exe using 18 source files.
 * Created On: 5/28/2023 8:05:44 PM
*/
//*** SourceCombiner -> original file IGameState.cs ***
namespace Algorithms.GameComponent
{
    public interface IGameState
    {
        /// <summary>
        /// Retrieve the possible moves
        /// </summary>
        /// <param name="isMax">Whether or not to retrieve moves for max</param>
        /// <returns>list of all possible moves</returns>
        IList GetPossibleMoves(bool isMax);
        /// <summary>
        /// Applies a move to the game state.  The game state must remember this move so that it can be retrieves with GetMove.
        /// </summary>
        /// <param name="isMax">Whether or not the move is for max</param>
        /// <param name="move">the move to apply</param>
        void ApplyMove(object move, bool isMax);
        /// <summary>
        /// Retrieves the move that was played to reach this state.
        /// </summary>
        /// <param name="isMax">Whether or not the move is for max</param>
        /// <returns>The move</returns>
        object GetMove(bool isMax);
        /// <summary>
        /// Clones the game state
        /// </summary>
        /// <returns>The copy of the state</returns>
        IGameState Clone();
        /// <summary>
        /// Returns whether or not the game is over and who won (1 - max wins, 0 - draw, -1 - min wins, null - game is not over)
        /// </summary>
        /// <returns>Who won the game</returns>
        double? GetWinner();
        /// <summary>
        /// Determines if the game state is the same as this one
        /// </summary>
        /// <param name="">the state to compare against</param>
        /// <returns>true if equal</returns>
        bool Equals(IGameState state);
        /// <summary>
        /// Evaluates the current game board closer to 1 is max wins closer to -1 is min wins
        /// </summary>
        /// <param name="isMax">true if it is max's turn else false</param>
        /// <returns>A number between [-1, 1]</returns>
        double Evaluate(bool isMax);
    }
}
//*** SourceCombiner -> original file Graph.cs ***
namespace Algorithms.Graph
{
    public class Graph
    {
        private Dictionary<int, INode> Nodes;
        //Will hold shortest paths from a start node id to an end node id
        private Dictionary<int, Dictionary<int, List<ILink>>> Paths;
        public Graph()
        {
            Nodes = new Dictionary<int, INode>();
        }
        public void AddNode(INode node)
        {
            Nodes[node.Id] = node;
        }
        /// <summary>
        /// Calculates all of the shortest paths in the node links
        /// </summary>
        public void CalculateShortestPaths()
        {
            Paths = new Dictionary<int, Dictionary<int, List<ILink>>>();
            foreach (INode vertex in Nodes.Values)
            {
                InternalBuildShortestPathsFromStartNode(vertex);
            }
        }
        public void BuildShortestPathsFromStartNode(INode startNode, double maxDistance = double.MaxValue)
        {
            Paths = new Dictionary<int, Dictionary<int, List<ILink>>>();
            InternalBuildShortestPathsFromStartNode(startNode, maxDistance);
        }
        private void InternalBuildShortestPathsFromStartNode(INode startNode, double maxDistance = double.MaxValue)
        {
            foreach (INode node in Nodes.Values)
            {
                node.IsExplored = false;
            }
            List<ILink> minimumSpanningTree = new List<ILink>();
            Paths[startNode.Id] = new Dictionary<int, List<ILink>>();
            Paths[startNode.Id][startNode.Id] = new List<ILink>();
            minimumSpanningTree.Add(new Link(startNode.Id, startNode.Id, 0));
            startNode.IsExplored = true;
            int vertexCount = Nodes.Count;
            double currentDist;
            while (minimumSpanningTree.Count < vertexCount)
            {
                double minDist = 99999;
                ILink bestLink = null;
                ILink parentLink = null;
                foreach (ILink currentLink in minimumSpanningTree)
                {
                    INode currentNode = Nodes[currentLink.EndNodeId];
                    currentDist = currentLink.GetDistance(Paths[startNode.Id][currentNode.Id]);
                    foreach (ILink adjacent in currentNode.GetLinks())
                    {
                        INode adjacentNode = Nodes[adjacent.EndNodeId];
                        if (adjacentNode.IsExplored)
                        {
                            continue;//skip nodes already in minimum spanning tree
                        }
                        double distance = currentDist + adjacent.Distance;
                        if (distance < minDist)
                        {
                            minDist = distance;
                            bestLink = adjacent;
                            parentLink = currentLink;
                        }
                        else if (distance == minDist)//When the distances are equivalent pick the one with the shortest path
                        {
                            Paths[startNode.Id].TryGetValue(currentNode.Id, out List<ILink> pathCurrent);
                            int lengthCurrent = pathCurrent == null ? 0 : pathCurrent.Count;
                            Paths[startNode.Id].TryGetValue(parentLink.EndNodeId, out List<ILink> pathPrevious);
                            int lengthPrevious = pathPrevious == null ? 0 : pathPrevious.Count;
                            if (lengthCurrent < lengthPrevious)
                            {
                                minDist = distance;
                                bestLink = adjacent;
                                parentLink = currentLink;
                            }
                        }
                    }
                }
                if (parentLink == null)
                {
                    return;//no possible paths
                }
                minimumSpanningTree.Add(bestLink);
                Nodes[bestLink.EndNodeId].IsExplored = true;
                List<ILink> currentPath = null;
                if (!parentLink.EndNodeId.Equals(startNode.Id))
                {
                    Paths[startNode.Id].TryGetValue(parentLink.EndNodeId, out currentPath);
                }
                if (currentPath == null)
                {
                    currentPath = new List<ILink>();
                }
                else
                {
                    currentPath = new List<ILink>(currentPath);
                }
                Paths[startNode.Id].Add(bestLink.EndNodeId, currentPath);
                currentPath.Add(bestLink);
                if (minDist >= maxDistance)
                    return;
            }
        }
        /// <summary>
        /// Retrieves the next node along the path from start to end
        /// </summary>
        /// <param name="startId">The starting node id</param>
        /// <param name="endId">The ending node id</param>
        /// <returns>The next node in the path</returns>
        public INode GetNextNodeInShortestPath(INode startNode, INode endNode)
        {
            Paths.TryGetValue(startNode.Id, out Dictionary<int, List<ILink>> endPoints);
            if (endPoints == null)
            {
                Console.Error.WriteLine("|||Start not found: " + startNode.Id);
                throw new InvalidOperationException();
            }
            endPoints.TryGetValue(endNode.Id, out List<ILink> paths);
            if (paths == null)
            {
                Console.Error.WriteLine("|||End not found: " + endNode.Id + " start: " + startNode.Id);
                throw new InvalidOperationException();
            }
            INode shortest = Nodes[paths.First().EndNodeId];
            Console.Error.WriteLine("|||Shortest: " + shortest + " from: " + startNode.Id + " to: " + endNode.Id);
            return shortest;
        }
        /// <summary>
        /// Retrieves all nodes along the shortest path between two points
        /// </summary>
        /// <param name="startNodeId">Start node id</param>
        /// <param name="endNodeId">End node id</param>
        /// <returns>The full path from start to end</returns>
        /// <exception cref="InvalidOperationException"></exception>
        public IList<ILink> GetShortestPathAll(int startNodeId, int endNodeId)
        {
            Paths.TryGetValue(startNodeId, out Dictionary<int, List<ILink>> endPoints);
            if (endPoints == null)
            {
                Console.Error.WriteLine("|||Start not found: " + startNodeId);
                throw new InvalidOperationException();
            }
            endPoints.TryGetValue(endNodeId, out List<ILink> paths);
            if (paths == null)
            {
                Console.Error.WriteLine("|||End not found: " + endNodeId + " start: " + startNodeId);
                throw new InvalidOperationException();
            }
            return paths;
        }
        /// <summary>
        /// Retrieves the distance following the shortest path from start to end.
        /// </summary>
        /// <param name="startId">The starting node</param>
        /// <param name="endId">The ending node</param>
        /// <returns>The distance along the shortest path</returns>
        public double GetShortestPathDistance(INode startNode, INode endNode)
        {
            return GetShortestPathDistance(startNode.Id, endNode.Id);
        }
        /// <summary>
        /// Retrieves the distance following the shortest path from start to end.
        /// </summary>
        /// <param name="startId">The starting node id</param>
        /// <param name="endId">The ending node id</param>
        /// <returns>The distance along the shortest path</returns>
        public double GetShortestPathDistance(int startId, int endId)
        {
            Paths.TryGetValue(startId, out Dictionary<int, List<ILink>> endPoints);
            if (endPoints == null)
            {
                return double.MaxValue;
            }
            endPoints.TryGetValue(endId, out List<ILink> paths);
            if (paths == null)
            {
                return double.MaxValue;
            }
            return paths.First().GetDistance(paths);
        }
        /// <summary>
        /// Retrieves the straight line distance from start to end
        /// </summary>
        /// <param name="startId">The starting node</param>
        /// <param name="endId">The ending node</param>
        /// <returns>The distance from start to end</returns>
        public double GetDistance(Node startNode, Node endNode)
        {
            return startNode.GetLinks().Where(l => l.EndNodeId.Equals(endNode.Id)).First().Distance;
        }
    }
}
//*** SourceCombiner -> original file GraphLinks.cs ***
namespace Algorithms.Graph
{
    public class GraphLinks
    {
        public class Node
        {
            public int Id;
            public double Distance;
            public bool IsExplored;
            public Node(int id, double distance)
            {
                Id = id;
                Distance = distance;
            }
            /// <summary>
            /// Creates a clone of the node from the current distance.  This is used while building the minimum spanning tree.
            /// </summary>
            /// <param name="currentDist">The current distance from the starting node</param>
            /// <returns>A clone of the node with the proper distance</returns>
            public Node CreateAtDistance(double currentDist)
            {
                return new Node(Id, currentDist + Distance);
            }
        }
        private Dictionary<int, List<Node>> Links;
        private Dictionary<int, Dictionary<int, List<Node>>> Paths;
        private bool IsByDirectional;
        public GraphLinks(bool isByDirectional = true)
        {
            Links = new Dictionary<int, List<Node>>();
            IsByDirectional = isByDirectional;
        }
        public bool ContainsLink(int id1, int id2)
        {
            return Links.ContainsKey(id1) && Links[id1].Where(n => n.Id == id2).Any();
        }
        /// <summary>
        /// Adds a link to the list
        /// </summary>
        /// <param name="id1">First id</param>
        /// <param name="id2">Second id</param>
        /// <param name="distance">The distance between the two nodes</param>
        public void AddLink(int id1, int id2, double distance)
        {
            //Console.Error.WriteLine(id1 + " " + id2 + " " + distance);
            if (ContainsLink(id1, id2))
                return;
            AddLinkInternal(id1, id2, distance);
            if(IsByDirectional)
                AddLinkInternal(id2, id1, distance);
        }
        public void RemoveLink(int id1, int id2)
        {
            Links[id1].RemoveAll(n => n.Id == id2);
            Links[id2].RemoveAll(n => n.Id == id1);
        }
        /// <summary>
        /// Calculates all of the shortest paths in the node links
        /// </summary>
        public void CalculateShortestPaths()
        {
            Paths = new Dictionary<int, Dictionary<int, List<Node>>>();
            List<int> vertices = Links.Keys.ToList();
            int vertexCount = vertices.Count;
            foreach (int vertex in vertices)
            {
                CalculateShortestPathFromStartNode(vertex, vertexCount, 9999999);
            }
        }
        /// <summary>
        /// Calculates the shortest paths from a start node
        /// </summary>
        /// <param name="startNode">id of the start node</param>
        /// <param name="maxDistance">the fartheset distance to travel</param>
        public void CalculateShortestPathsFromStartNode(int startNode, int maxDistance)
        {
            Paths = new Dictionary<int, Dictionary<int, List<Node>>>();
            CalculateShortestPathFromStartNode(startNode, Links.Keys.Count, maxDistance);
        }
        /// <summary>
        /// Calculates the shortest paths from the start node to all other nodes
        /// </summary>
        /// <param name="startNode">The starting id</param>
        /// <param name="vertexCount">The number of nodes</param>
        /// <param name="maxDistance">the farthest distance to travel</param>
        private void CalculateShortestPathFromStartNode(int startNode, int vertexCount, int maxDistance)
        {
            List<Node> minimumSpanningTree = new List<Node>();
            //Console.Error.WriteLine("Starting with " + startNode);
            double currentDist = 0;
            Paths[startNode] = new Dictionary<int, List<Node>>();
            minimumSpanningTree.Add(new Node(startNode, currentDist));
            while (minimumSpanningTree.Count < vertexCount)
            {
                double minDist = 99999;
                Node bestNode = null;
                Node parentNode = null;
                foreach (Node currentNode in minimumSpanningTree)
                {
                    currentDist = currentNode.Distance;
                    //Console.Error.WriteLine("Inspecting: " + currentNode.FactoryId + " distance " + currentDist);
                    foreach (Node adjacent in GetLinks(currentNode.Id))
                    {
                        if (adjacent.IsExplored || minimumSpanningTree.Where(n => n.Id == adjacent.Id).Any())
                        {
                            adjacent.IsExplored = true;
                            continue;//skip nodes already in minimum spanning tree
                        }
                        double distance = currentDist + adjacent.Distance;
                        if (distance < minDist)
                        {
                            minDist = distance;
                            bestNode = adjacent.CreateAtDistance(currentDist);
                            parentNode = currentNode;
                        }
                        else if (distance == minDist)//When the distances are equivalent pick the one with the shortest path
                        {
                            Paths[startNode].TryGetValue(currentNode.Id, out List<Node> pathCurrent);
                            int lengthCurrent = pathCurrent == null ? 0 : pathCurrent.Count;
                            Paths[startNode].TryGetValue(parentNode.Id, out List<Node> pathPrevious);
                            int lengthPrevious = pathPrevious == null ? 0 : pathPrevious.Count;
                            if (lengthCurrent < lengthPrevious)
                            {
                                minDist = distance;
                                bestNode = adjacent.CreateAtDistance(currentDist);
                                parentNode = currentNode;
                            }
                        }
                    }
                }
                if (parentNode == null)
                {
                    return;//no possible paths
                }
                minimumSpanningTree.Add(bestNode);
                List<Node> currentPath = null;
                if (parentNode.Id != startNode)
                {
                    Paths[startNode].TryGetValue(parentNode.Id, out currentPath);
                }
                if (currentPath == null)
                {
                    currentPath = new List<Node>();
                }
                else
                {
                    currentPath = new List<Node>(currentPath);
                }
                Paths[startNode].Add(bestNode.Id, currentPath);
                currentPath.Add(bestNode);
                /*
                if (startNode == 0)
                {
                    Console.Error.WriteLine("Parent node: " + parentNode.FactoryId + " distance: " + parentNode.Distance);
                    Console.Error.WriteLine("Shortest Node: " + bestNode.FactoryId + " distance: " + bestNode.Distance);
                }
                */
                if (minDist >= maxDistance)
                    return;
            }
        }
        /// <summary>
        /// Retrieves the links that are adjacent to the given node
        /// </summary>
        /// <param name="id">The node id</param>
        /// <returns></returns>
        public List<Node> GetLinks(int id)
        {
            return Links[id];
        }
        public Dictionary<int, List<Node>> GetPaths(int startId)
        {
            return Paths[startId];
        }
        /// <summary>
        /// Retrieves the straight line distance from start to end
        /// </summary>
        /// <param name="startId">The starting node id</param>
        /// <param name="endId">The ending node id</param>
        /// <returns>The distance from start to end</returns>
        public double GetDistance(int startId, int endId)
        {
            return GetLinks(startId).Where(l => l.Id == endId).First().Distance;
        }
        /// <summary>
        /// Retrieves the distance following the shortest path from start to end.
        /// </summary>
        /// <param name="startId">The starting node id</param>
        /// <param name="endId">The ending node id</param>
        /// <returns>The distance along the shortest path</returns>
        public double GetShortestPathDistance(int startId, int endId)
        {
            Paths.TryGetValue(startId, out Dictionary<int, List<Node>> endPoints);
            if (endPoints == null)
            {
                return 99999;
            }
            endPoints.TryGetValue(endId, out List<Node> paths);
            if (paths == null)
            {
                return 99999;
            }
            return paths.Last().Distance;
        }
        /// <summary>
        /// Retrieves the next node along the path from start to end
        /// </summary>
        /// <param name="startId">The starting node id</param>
        /// <param name="endId">The ending node id</param>
        /// <returns>The factory id that is first in the path</returns>
        public int GetShortestPath(int startId, int endId)
        {
            Paths.TryGetValue(startId, out Dictionary<int, List<Node>> endPoints);
            if (endPoints == null)
            {
                Console.Error.WriteLine("|||Start not found: " + startId);
                throw new InvalidOperationException();
            }
            endPoints.TryGetValue(endId, out List<Node> paths);
            if (paths == null)
            {
                Console.Error.WriteLine("|||End not found: " + endId + " start: " + startId);
                throw new InvalidOperationException();
            }
            int shortest = paths.First().Id;
            Console.Error.WriteLine("|||Shortest: " + shortest + " from: " + startId + " to: " + endId);
            return shortest;
        }
        /// <summary>
        /// Retrieves the full path from start to end
        /// </summary>
        /// <param name="startId">the start id</param>
        /// <param name="endId">the end id</param>
        /// <returns>The full path</returns>
        public List<Node> GetShortestPathAll(int startId, int endId)
        {
            Paths.TryGetValue(startId, out Dictionary<int, List<Node>> endPoints);
            if (endPoints == null)
            {
                Console.Error.WriteLine("|||Start not found: " + startId);
                throw new InvalidOperationException();
            }
            endPoints.TryGetValue(endId, out List<Node> paths);
            if (paths == null)
            {
                Console.Error.WriteLine("|||End not found: " + endId + " start: " + startId);
                throw new InvalidOperationException();
            }
            return paths;
        }
        //Adds links to the node links
        private void AddLinkInternal(int startNode, int endNode, double distance)
        {
            List<Node> nodeLinks;
            if (Links.ContainsKey(startNode))
            {
                nodeLinks = Links[startNode];
            }
            else
            {
                nodeLinks = new List<Node>();
                Links[startNode] = nodeLinks;
            }
            nodeLinks.Add(new Node(endNode, distance));
        }
    }
}
//*** SourceCombiner -> original file INode.cs ***
namespace Algorithms.Graph
{
    public interface INode
    {
        int Id { get; }
        bool IsExplored { get; set; }
        List<ILink> GetLinks();
    }
    public class Node : INode
    {
        public int Id { get; private set; }
        public bool IsExplored { get; set; }
        private List<ILink> Links;
        public Node(int id)
        {
            Id = id;
            IsExplored = false;
            Links = new List<ILink>();
        }
        public void AddLink(ILink link)
        {
            Links.Add(link);
        }
        public List<ILink> GetLinks()
        {
            return Links;
        }
        public bool Equals(INode node)
        {
            return node.Id == Id;
        }
    }
    public interface ILink
    {
        int StartNodeId { get; }
        int EndNodeId { get; }
        double Distance { get; }
        double GetDistance(List<ILink> currentPath);
    }
    public class Link : ILink
    {
        public int StartNodeId { get; private set; }
        public int EndNodeId { get; private set; }
        public double Distance { get; private set; }
        public Link(int startNodeId, int endNodeId, double distance)
        {
            StartNodeId = startNodeId;
            EndNodeId = endNodeId;
            Distance = distance;
        }
        public Link(INode startNode, INode endNode, double distance)
        {
            StartNodeId = startNode.Id;
            EndNodeId = endNode.Id;
            Distance = distance;
        }
        public double GetDistance(List<ILink> currentPath)
        {
            double distance = 0;
            foreach(ILink link in currentPath)
            {
                distance += link.Distance;
            }
            return distance;
        }
    }
}
//*** SourceCombiner -> original file GameTreeNode.cs ***
namespace Algorithms.Trees
{
    public class GameTreeNode
    {
        public IGameState state;
        public IList moves;
        public List<GameTreeNode> children;
        public double wins = 0;
        public double loses = 0;
        public int totalPlays = 0;
        public GameTreeNode parent;
        public bool isMax;
        public GameTreeNode(IGameState state, bool isMax, GameTreeNode parent = null)
        {
            this.state = state;
            moves = new List<object>(50);
            var possibleMoves = state.GetPossibleMoves(isMax);
            for(int i = 0; i < possibleMoves.Count; i++)
            {
                var obj = possibleMoves[i];
                moves.Add(obj);
            }
            children = new List<GameTreeNode>(50);
            this.parent = parent;
            this.isMax = isMax;
        }
        public double GetScore(bool isMax)
        {
            double totalPlays = TotalPlays();
            if (totalPlays == 0)
                return 0;
            if (isMax)
            {
                return (wins - loses) / totalPlays;
            }
            else
            {
                return (loses - wins) / totalPlays;
            }
        }
        public int TotalPlays()
        {
            return totalPlays;
        }
        public double? GetWinner()
        {
            return state.GetWinner();
        }
        public void ApplyWinner(double? winner)
        {
            if (winner.HasValue)
            {
                if(winner > 0)
                {
                    wins += winner.Value;
                }
                else if(winner < 0)
                {
                    loses += Math.Abs(winner.Value);
                }
                totalPlays++;
            }
        }
        public double Evaluate()
        {
            return state.Evaluate(isMax);
        }
    }
}
//*** SourceCombiner -> original file Minimax.cs ***
namespace Algorithms.Trees
{
    public class Minimax : TreeAlgorithm
    {
        public object GetNextMove(Stopwatch watch, int timeLimit, int depth = int.MaxValue)
        {
            double val = 99999999;
            val *= RootNode.isMax ? -1 : 1;
            object bestMove = null;
            foreach (object move in RootNode.moves)
            {
                GameTreeNode child = Expand(RootNode, move);
                double currentVal = RunMinimax(child, depth, -999999, 999999, watch, timeLimit);
                if ((RootNode.isMax && currentVal > val) || (!RootNode.isMax && currentVal < val))
                {
                    bestMove = move;
                    val = currentVal;
                }
                if (watch.ElapsedMilliseconds >= timeLimit)
                {
                    break;
                }
            }
            return bestMove;
        }
        public double RunMinimax(GameTreeNode currentNode, int depth, double alpha, double beta, Stopwatch watch, int timeLimit)
        {
            if (depth == 0 || watch.ElapsedMilliseconds >= timeLimit)
            {
                double eval = currentNode.Evaluate();
                return eval;
            }
            double? winner = currentNode.GetWinner();
            if (winner.HasValue)
            {
                return winner.Value;
            }
            if (currentNode.isMax)
            {
                double value = -99999;
                double minMax;
                foreach (object move in currentNode.moves)
                {
                    GameTreeNode childNode = Expand(currentNode, move);
                    minMax = RunMinimax(childNode, depth - 1, alpha, beta, watch, timeLimit);
                    value = Math.Max(value, minMax);
                    alpha = Math.Max(alpha, value);
                    if (alpha >= beta)
                    {
                        break;
                    }
                }
                return value;
            }
            else
            {
                double value = 99999;
                double minMax;
                foreach (object move in currentNode.moves)
                {
                    GameTreeNode childNode = Expand(currentNode, move);
                    minMax = RunMinimax(childNode, depth - 1, alpha, beta, watch, timeLimit);
                    value = Math.Min(value, minMax);
                    beta = Math.Min(beta, value);
                    if (beta <= alpha)
                    {
                        break;
                    }
                }
                return value;
            }
        }
    }
}
//*** SourceCombiner -> original file MonteCarloTreeSearch.cs ***
namespace Algorithms.Trees
{
    public class MonteCarloTreeSearch : TreeAlgorithm
    {
        private Random rand;
        private bool printErrors;
        private SearchStrategy strategy;
        public enum SearchStrategy
        {
            Random = 0,
            Sequential = 1
        }
        public MonteCarloTreeSearch(bool showErrors = true, SearchStrategy searchStrategy = SearchStrategy.Random) 
        {
            rand = new Random();
            printErrors = showErrors;
            strategy = searchStrategy;
        }
        public IGameState GetRootState()
        {
            return RootNode.state;
        }
        /// <summary>
        /// Get the next move
        /// </summary>
        /// <param name="watch">timer</param>
        /// <param name="timeLimit">The amount of time to give to the search in milliseconds</param>
        /// <param name="depth">How deep to run the simulations; does not impact how deep it goes in the game tree.</param>
        /// <param name="numRollouts">The number of roll outs to play per expansion</param>
        /// <returns></returns>
        public object GetNextMove(Stopwatch watch, int timeLimit, int depth = -1, int numRollouts = 1, double? exploration = null)
        {
            if(exploration == null)
            {
                exploration = Math.Sqrt(2);
            }
            int count = 0;
            do
            {
                GameTreeNode selectedNode = SelectNodeWithUnplayedMoves(RootNode, exploration.Value);
                if(selectedNode == null)
                {
                    if(printErrors)
                        Console.Error.WriteLine("Found no more moves!");
                    break;
                }
                object move = SelectMove(selectedNode);
                GameTreeNode childNode = Expand(selectedNode, move);
                double? winner = childNode.GetWinner();
                if (winner.HasValue)
                {
                    BackPropagate(childNode, winner);
                }
                else
                {
                    for (int i = 0; i<numRollouts; i++)
                    {
                        var clonedState = childNode.state.Clone();
                        winner = SimulateGame(clonedState, watch, timeLimit, depth, childNode.isMax);
                        if (!winner.HasValue)
                            break;//We simulated a game, but it didn't end so we are out of time...
                        BackPropagate(childNode, winner);
                        count++;
                    }
                }
            }
            while (watch.ElapsedMilliseconds < timeLimit);
            if(printErrors)
                Console.Error.WriteLine($"Played {count} games!");
            GameTreeNode bestChild = null;
            double bestScore = double.MinValue;
            for(int i = 0; i<RootNode.children.Count; i++)
            {
                var child = RootNode.children[i];
                double score = child.GetScore(RootNode.isMax);
                if(bestScore < score)
                {
                    bestChild = child;
                    bestScore = score;
                }
                if(printErrors)
                    Console.Error.WriteLine($"w: {child.wins} l: {child.loses} total: {child.totalPlays} move: {child.state.GetMove(RootNode.isMax)} score: {score} isMax: {RootNode.isMax}");
            }
            if(printErrors)
                Console.Error.WriteLine($"Best: w: {bestChild.wins} l: {bestChild.loses} total: {bestChild.totalPlays} score: {bestScore} move: {bestChild.state.GetMove(RootNode.isMax)}");
            return bestChild.state.GetMove(RootNode.isMax);
        }
        private void BackPropagate(GameTreeNode selectedNode, double? winner)
        {
            selectedNode.ApplyWinner(winner);
            GameTreeNode tempNode = selectedNode.parent;
            while(tempNode != null)
            {
                tempNode.ApplyWinner(winner);
                tempNode = tempNode.parent;
            }
        }
        private double? SimulateGame(IGameState state, Stopwatch watch, int timeLimit, int depth, bool isMax)
        {
            double? winner;
            do
            {
                object move = SelectMoveAtRandom(state, isMax);
                state.ApplyMove(move, isMax);
                if (watch.ElapsedMilliseconds >= timeLimit)
                {
                    return null;
                }
                depth--;
                isMax = !isMax;
                winner = state.GetWinner();
            }
            while (!winner.HasValue && depth != 0);
            if (winner.HasValue)
            {
                return winner;
            }
            if (depth == 0)
            {
                double eval = state.Evaluate(isMax);
                if (eval > 1)
                {
                    return 1;
                }
                else if (eval < -1)
                    return -1;
                else return eval;
            }
            throw new InvalidOperationException("Could not find a winner for simulation!");
        }
        private GameTreeNode SelectNodeWithUnplayedMoves(GameTreeNode node, double exploration)
        {
            Queue<GameTreeNode> queue = new Queue<GameTreeNode>();
            queue.Enqueue(node);
            GameTreeNode tempNode;
            GameTreeNode bestNode = null;
            double maxValue = -1;
            while (queue.Count > 0)
            {
                tempNode = queue.Dequeue();
                if (tempNode.moves.Count == 0)
                {
                    for(int i = 0; i<tempNode.children.Count; i++)
                    {
                        var child = tempNode.children[i];
                        queue.Enqueue(child);
                    }
                }
                else if(tempNode.parent != null)
                {
                    double wins = RootNode.isMax ? tempNode.wins : tempNode.loses;
                    double nodeTotal = tempNode.TotalPlays();
                    double parentTotal = tempNode.parent.TotalPlays();
                    double value = wins / nodeTotal + exploration * Math.Sqrt(Math.Log(parentTotal) / nodeTotal);
                    if(value > maxValue)
                    {
                        maxValue = value;
                        bestNode = tempNode;
                    }
                }
                else return tempNode;
            }
            return bestNode;
        }
        private object SelectMoveAtRandom(IGameState state, bool isMax)
        {
            IList moves = state.GetPossibleMoves(isMax);
            if (moves.Count == 0)
            {
                throw new Exception("No moves available!");
            }
            int index = rand.Next(0, moves.Count);
            return moves[index];
        }
        private object SelectMove(GameTreeNode node)
        {
            switch (strategy)
            {
                case SearchStrategy.Random:
                    return SelectMoveAtRandom(node);
                case SearchStrategy.Sequential:
                    return SelectMoveSequentially(node);
            }
            throw new InvalidOperationException("strategy not supported");
        }
        private object SelectMoveSequentially(GameTreeNode node)
        {
            object move;
            if (node.moves.Count == 0)//If there are no more moves then that is a problem...
            {
                throw new Exception("No moves found!");
            }
            else
            {
                move = node.moves[0];
                node.moves.RemoveAt(0);
            }
            return move;
        }
        private object SelectMoveAtRandom(GameTreeNode node)
        {
            object move;
            if (node.moves.Count == 0)//If there are no more moves then that is a problem...
            {
                throw new Exception("No moves found!");
            }
            else
            {
                int index = rand.Next(0, node.moves.Count);
                move = node.moves[index];
                node.moves.RemoveAt(index);
            }
            return move;
        }
    }
}
//*** SourceCombiner -> original file TreeAlgorithm.cs ***
namespace Algorithms.Trees
{
    public class TreeAlgorithm
    {
        protected GameTreeNode RootNode;
        public void SetState(IGameState rootState, bool isMax = true, bool findState = true)
        {
            if (RootNode != null && findState)
            {
                //if we have already started searching then continue to search as we go if possible; the search will scan two layers to see if only one move was played or if 2 moves were played to get back to the original players turn.
                //find the child that matches the new node
                bool isFound = false;
                //Expand any moves left in the root node (if any)
                for(int i = 0; i<RootNode.moves.Count; i++) 
                {
                    var move = RootNode.moves[i];
                    Expand(RootNode, move);
                }
                //Begin scanning the children
                for(int i = 0; i<RootNode.children.Count; i++)
                {
                    var child = RootNode.children[i];
                    if (child.state.Equals(rootState))
                    {
                        RootNode = child;
                        isFound = true;
                        break;
                    }
                    for (int j = 0; j< child.moves.Count; j++)
                    {
                        var move = child.moves[j];
                        Expand(child, move);
                    }
                    for(int j = 0; j< child.children.Count; j++) 
                    {
                        var descendent = child.children[j];
                        if (descendent.state.Equals(rootState))
                        {
                            RootNode = descendent;
                            isFound = true;
                            break;
                        }
                    }
                }
                if (!isFound)
                {
                    Console.Error.WriteLine("Could not find the next state in tree!  Starting over...");
                    RootNode = new GameTreeNode(rootState.Clone(), isMax);
                }
                else
                {
                    RootNode.parent = null;
                }
            }
            else
            {
                RootNode = new GameTreeNode(rootState.Clone(), isMax);
            }
        }
        /// <summary>
        /// Expands the given node by create a clone, applying the move and then adding it to the list of children.
        /// </summary>
        /// <param name="node">The node to expand</param>
        /// <param name="move">The move to play on the expanded node</param>
        /// <returns></returns>
        protected GameTreeNode Expand(GameTreeNode node, object move)
        {
            IGameState nextState = node.state.Clone();
            nextState.ApplyMove(move, node.isMax);
            GameTreeNode childNode = new GameTreeNode(nextState, !node.isMax, node);
            node.children.Add(childNode);
            return childNode;
        }
    }
}
//*** SourceCombiner -> original file BitFunctions.cs ***
namespace Algorithms.Utility
{
    public static class BitFunctions
    {
        public static bool IsBitSet(long value, int location)
        {
            long mask = GetBitMask(location);
            return (value & mask) == mask;
        }
        public static long SetBit(long value, int location)
        {
            return value | (GetBitMask(location));
        }
        public static long ClearBit(long value, int location)
        {
            return value & (~(GetBitMask(location)));
        }
        public static long SetOrClearBit(long value, int location, bool isSet)
        {
            if (isSet)
                return SetBit(value, location);
            return ClearBit(value, location);
        }
        public static int NumberOfSetBits(long i)
        {
            i = i - ((i >> 1) & 0x5555555555555555);
            i = (i & 0x3333333333333333) + ((i >> 2) & 0x3333333333333333);
            return (int)((((i + (i >> 4)) & 0xF0F0F0F0F0F0F0F) * 0x101010101010101) >> 56);
        }
        public static long GetBitMask(int index)
        {
            return (long)1 << index;
        }
    }
}
//*** SourceCombiner -> original file Board.cs ***
namespace GameSolution.Entities
{
    public class Board
    {     
        public IDictionary<int, Cell> Cells { get; set; }
        public Graph Graph { get; set; }
        public Board()
        {
            Cells= new Dictionary<int, Cell>();
            Graph = new Graph();
        }
        public Board(Board board)
        {
            Cells = new Dictionary<int, Cell>();
            foreach (var cell in board.Cells.Values)
            {
                board.Cells[cell.Index] = cell.Clone();
            }
        }
        public void SetCells(IList<Cell> cells)
        {
            foreach(Cell cell in cells) 
            { 
                Cells[cell.Index] = cell;
            }         
            foreach(Cell cell in cells)
            {
                var node = new Node(cell.Index);
                Graph.AddNode(node);
                foreach (int index in cell.Neighbors)
                {
                    if (index != -1)
                    {
                        var neighborCell = GetCell(index);
                        var distance = neighborCell.ResourceAmount > 0 ? 1 : 1.001;
                        node.AddLink(new Link(node, new Node(index), distance));
                        //Console.Error.WriteLine($"adding line {cell.Index}, {index}, {distance}");
                    }
                }
            }
            Graph.CalculateShortestPaths();
        }
        public Cell GetCell(int index)
        {
            if (index == -1)
                throw new System.Exception();
            return Cells[index];
        }
        public Board Clone()
        {
            return new Board(this);
        }
        public double? GetWinner()
        {
            return null;
        }
        public void UpdateBoard()
        {
        }
    }
}
//*** SourceCombiner -> original file Cell.cs ***
namespace GameSolution.Entities
{
    public enum ResourceType
    {
        None = 0,
        Egg = 1,
        Crystal = 2
    }
    public enum BaseType
    {
        NoBase = 0,
        MyBase = 1,
        OppBase = 2
    }
    public class Cell
    {
        public int Index { get; set; }
        public ResourceType ResourceType { get; set; }
        public int ResourceAmount { get; set; }
        public int MyAnts { get; set; }
        public int OppAnts { get; set; }
        public List<int> Neighbors { get; set; }
        public BaseType BaseType { get; set; }
        public Cell(int index, ResourceType resourceType, int resourceAmount, List<int> neighbors)
        {
            Index= index;
            ResourceType= resourceType;
            Neighbors = neighbors;
            ResourceAmount= resourceAmount;
        }
        public Cell(Cell cell)
        {
            Index = cell.Index;
            ResourceType = cell.ResourceType;
            ResourceAmount= cell.ResourceAmount;
            Neighbors = cell.Neighbors.Select(cell=> cell).ToList();
        }
        public void SetAnts(int myAnts, int oppAnts) 
        {
            MyAnts= myAnts;
            OppAnts= oppAnts;
        }
        public void SetResource(int resourcesLeft)
        {
            ResourceAmount= resourcesLeft;
            if(ResourceAmount <= 0)
            {
                ResourceType = ResourceType.None;
            }
        }
        public void SetBaseType(BaseType type)
        {
            BaseType= type;
        }
        public Cell Clone()
        {
            return new Cell(this);
        }
        public bool Equals(Cell cell)
        {
            return false;
        }
        public override string ToString()
        {
            //return $"new Cell({Index}, (ResourceType){(int)ResourceType}, {ResourceAmount}, new List<int>(){{{string.Join(',', Neighbors)})}},";
            return $"id: {Index}, rt: {ResourceType}, ra: {ResourceAmount}, bt: {BaseType}, ma: {MyAnts}, oa: {OppAnts}";
        }
    }
}
//*** SourceCombiner -> original file Move.cs ***
namespace GameSolution.Entities
{
    public enum MoveType
    {
        WAIT = 0,
        MESSAGE = 1,
        LINE = 2,
        BEACON = 3,
    };
    public class MoveAction
    {
        public MoveType Type { get; set; }
        public int Index1 { get; set; }
        public int Index2 { get; set; }
        public int Strength { get; set; }
        public string Message { get; set; }
        public MoveAction(MoveType moveType) 
        { 
            Type = moveType;
        }
        public static MoveAction CreateLine(int index1, int index2, int strength)
        {
            var action = new MoveAction(MoveType.LINE);
            action.Index1 = index1;
            action.Index2 = index2;
            action.Strength = strength;
            return action;
        }
        public static MoveAction CreateBeacon(int index1, int strength)
        {
            var action = new MoveAction(MoveType.BEACON);
            action.Index1 = index1;
            action.Strength = strength;
            return action;
        }
        public static MoveAction CreateMessage(string message)
        {
            var action = new MoveAction(MoveType.MESSAGE);
            action.Message = message;
            return action;
        }
        public static MoveAction CreateWait()
        {
            var action = new MoveAction(MoveType.WAIT);
            return action;
        }
    }
    public class Move
    {
        public List<MoveAction> Actions { get; set; }
        public Move()
        {
            Actions = new List<MoveAction>();
        }
        public Move(Move move)
        {
            Actions = move.Actions.Select(m => m).ToList();
        }
        public void AddAction(MoveAction move)
        {
            Actions.Add(move);
        }
        public Move Clone()
        {
            return new Move(this);
        }
        public override string ToString()
        {
            StringBuilder moveStr = new StringBuilder();
            foreach(MoveAction move in Actions)
            {
                switch (move.Type)
                {
                    case MoveType.LINE:
                        moveStr.Append("LINE " + move.Index1 + " " + move.Index2 + " " + move.Strength + ";");
                        break;
                    case MoveType.WAIT:
                        moveStr.Append("WAIT;");
                        break;
                    case MoveType.BEACON:
                        moveStr.Append("BEACON " + move.Index1 + " " + move.Strength + ";");
                        break;
                    case MoveType.MESSAGE:
                        moveStr.Append("MESSAGE " + move.Message + ";");
                        break;
                }
            }
            return moveStr.ToString().Substring(0, moveStr.Length - 1);
        }
    }
}
//*** SourceCombiner -> original file GameBuilder.cs ***
namespace GameSolution.Game
{
    public static class GameBuilder
    {
        public static GameState BuildEmptyGame(bool setNextTurn = true)
        {
            GameState game = new GameState();
            return game;
        }
        public static GameState BuildBasicGame()
        {
            GameState game = new GameState();
            List<Cell> cells = new List<Cell>()
            {
                new Cell(0, 0, 0, new List<int>(){-1,2,-1,-1,-1,11}),
                new Cell(1, 0, 0, new List<int>(){-1,-1,10,-1,3,-1}),
                new Cell(2, 0, 0, new List<int>(){14,16,4,-1,0,-1}),
                new Cell(3, 0, 0, new List<int>(){-1,1,-1,15,17,5}),
                new Cell(4, 0, 0, new List<int>(){16,-1,-1,6,-1,2}),
                new Cell(5, 0, 0, new List<int>(){7,-1,3,17,-1,-1}),
                new Cell(6, 0, 0, new List<int>(){4,-1,-1,8,-1,-1}),
                new Cell(7, 0, 0, new List<int>(){9,-1,-1,5,-1,-1}),
                new Cell(8, (ResourceType)2, 19, new List<int>(){6,-1,-1,18,10,-1}),
                new Cell(9, (ResourceType)2, 19, new List<int>(){19,11,-1,7,-1,-1}),
                new Cell(10, (ResourceType)2, 58, new List<int>(){-1,8,18,20,-1,1}),
                new Cell(11, (ResourceType)2, 58, new List<int>(){21,-1,0,-1,9,19}),
                new Cell(12, 0, 0, new List<int>(){22,24,14,-1,21,29}),
                new Cell(13, 0, 0, new List<int>(){-1,20,28,23,25,15}),
                new Cell(14, 0, 0, new List<int>(){24,-1,16,2,-1,12}),
                new Cell(15, 0, 0, new List<int>(){3,-1,13,25,-1,17}),
                new Cell(16, 0, 0, new List<int>(){-1,-1,-1,4,2,14}),
                new Cell(17, 0, 0, new List<int>(){5,3,15,-1,-1,-1}),
                new Cell(18, 0, 0, new List<int>(){8,-1,-1,26,20,10}),
                new Cell(19, 0, 0, new List<int>(){27,21,11,9,-1,-1}),
                new Cell(20, (ResourceType)2, 41, new List<int>(){10,18,26,28,13,-1}),
                new Cell(21, (ResourceType)2, 41, new List<int>(){29,12,-1,11,19,27}),
                new Cell(22, 0, 0, new List<int>(){-1,-1,24,12,29,-1}),
                new Cell(23, 0, 0, new List<int>(){13,28,-1,-1,-1,25}),
                new Cell(24, (ResourceType)1, 16, new List<int>(){-1,-1,-1,14,12,22}),
                new Cell(25, (ResourceType)1, 16, new List<int>(){15,13,23,-1,-1,-1}),
                new Cell(26, (ResourceType)1, 39, new List<int>(){18,-1,-1,-1,28,20}),
                new Cell(27, (ResourceType)1, 39, new List<int>(){-1,29,21,19,-1,-1}),
                new Cell(28, 0, 0, new List<int>(){20,26,-1,-1,23,13}),
                new Cell(29, 0, 0, new List<int>(){-1,22,12,21,27,-1})
            };
            Board board = new Board();
            board.SetCells(cells);
            game.SetNextTurn(board);
            return game;
        }
    }
}
//*** SourceCombiner -> original file GameHelper.cs ***
namespace GameSolution.Game
{
    public class GameHelper
    {
        GameState State { get; set; }
        public GameHelper(GameState state)
        {
            State = state;
        }
        public Move GetMove()
        {
            Move move = new Move();
            SortedDictionary<double, List<Cell>> distanceToTargets= new SortedDictionary<double, List<Cell>>();
            int totalEggTargets = 0;
            int totalCrystalTargets = 0;
            if (State.TotalCrystals > (State.TotalMyAnts + State.TotalOppAnts) / 6 * 10)
            {
                foreach (Cell eggCell in State.EggCells)
                {
                    var closestBase = GetClosestBase(State.MyBaseDictionary, eggCell);
                    if (IsMyBaseCloserThanOpponents(closestBase.Item1, State.OppBaseDictionary, eggCell))
                    {
                        Console.Error.WriteLine($"Found egg cell: {eggCell.Index} with minimum distance: {closestBase.Item1}");
                        if (!distanceToTargets.TryGetValue(closestBase.Item1, out List<Cell> targets))
                        {
                            targets = distanceToTargets[closestBase.Item1] = new List<Cell>();
                        }
                        targets.Add(eggCell);
                        totalEggTargets++;
                    }
                }
            }
            foreach (Cell crystalCell in State.CrystalCells)
            {
                var closestBase = GetClosestBase(State.MyBaseDictionary, crystalCell);
                if (IsMyBaseCloserThanOpponents(closestBase.Item1, State.OppBaseDictionary, crystalCell))
                {
                    if (!distanceToTargets.TryGetValue(closestBase.Item1, out List<Cell> targets))
                    {
                        targets = distanceToTargets[closestBase.Item1] = new List<Cell>();
                    }
                    targets.Add(crystalCell);
                    totalCrystalTargets++;
                }
            }
            HashSet<int> beacons = new HashSet<int>();
            var totalResources = 0;
            double previousDistance = 0;
            var eggsTargeted = 0;
            foreach(double key in distanceToTargets.Keys)
            {
                if (((key - previousDistance) < 2) && totalResources / (State.TotalMyAnts / key) > 4)
                    break;
                foreach(Cell target in distanceToTargets[key])
                {
                    var closestBase = GetClosestBase(State.MyBaseDictionary, target);
                    Console.Error.WriteLine($"Processing target: {target.Index} at distance: {key}");
                    var path = GetShortestPathFromExistingBeacons(beacons, closestBase.Item2.Index, target.Index);
                    if ((totalEggTargets > eggsTargeted && target.ResourceType == ResourceType.Crystal && ((State.TotalCrystals / (State.TotalOppAnts + State.TotalMyAnts) > 5) || (target.ResourceAmount / key < 3)) && (eggsTargeted == 0 || path.Count > 1)))
                    {
                        continue;
                    }
                    var totalCount = path.Count + beacons.Count;
                    Console.Error.WriteLine($"{totalCount} vs {State.TotalMyAnts}");
                    if (totalCount > State.TotalMyAnts)
                    { 
                        continue; 
                    }
                    beacons.Add(path[0].StartNodeId);
                    foreach(var link in path)
                    {
                        beacons.Add(link.EndNodeId);
                    }
                    totalResources += target.ResourceAmount;
                    if (target.ResourceType == ResourceType.Egg)
                    {
                        eggsTargeted++;
                    }
                }
                previousDistance = key;
            }
            foreach(var beacon in beacons)
            {
                move.AddAction(MoveAction.CreateBeacon(beacon, 1));
            }
            if (move.Actions.Count == 0)
                move.AddAction(MoveAction.CreateWait());
            return move;
        }
        public Tuple<double, Cell> GetClosestBase(Dictionary<int, Cell> bases, Cell target)
        {
            double minDistance = 999999;
            Cell closestBase = null;
            foreach (var myBaseTarget in bases.Values)
            {
                var distance = State.Board.Graph.GetShortestPathDistance(myBaseTarget.Index, target.Index);
                if (minDistance > distance)
                {
                    minDistance = distance;
                    closestBase = myBaseTarget;
                }
            }
            return Tuple.Create(minDistance, closestBase);
        }
        public IList<ILink> GetShortestPathFromExistingBeacons(HashSet<int> beacons, int startId, int endId)
        {
            var minDist = State.Board.Graph.GetShortestPathDistance(startId, endId);
            IList<ILink> bestPath = State.Board.Graph.GetShortestPathAll(startId, endId);
            foreach(int id in beacons)
            {
                if (endId != id)
                {
                    var distance = State.Board.Graph.GetShortestPathDistance(id, endId);
                    if (minDist > distance)
                    {
                        minDist = distance;
                        bestPath = State.Board.Graph.GetShortestPathAll(id, endId);
                    }
                }
            }
            return bestPath;
        }
        public bool IsMyBaseCloserThanOpponents(double distance, Dictionary<int, Cell> opponentBases, Cell targetLocation)
        {
            foreach(Cell oppBase in opponentBases.Values)
            {
                var oppDistance = State.Board.Graph.GetShortestPathDistance(oppBase.Index, targetLocation.Index);
                if (oppDistance * 2.5 < distance || ((oppDistance < distance) && (targetLocation.ResourceAmount / distance) < 2))
                    return false;
            }
            return true;
        }
    }
}
//*** SourceCombiner -> original file GameState.cs ***
namespace GameSolution.Game
{
    public class GameState : IGameState
    {
        public bool enableLogging = false;
        public Board Board { get; set; }
        public int turn { get; set; }
        public Dictionary<int, Cell> MyBaseDictionary { get; set; }
        public Dictionary<int, Cell> OppBaseDictionary { get; set; }
        public IList<Cell> EggCells { get; set; }
        public IList<Cell> CrystalCells { get; set; }
        public int TotalMyAnts { get; set; } = 0;
        public int TotalOppAnts { get; set; } = 0;
        public int TotalCrystals { get; set; } = 0;
        public Move? maxMove { get; set; }
        public Move? minMove { get; set; }
        public GameState()
        {
            turn = 0;
            maxMove = null;
            minMove = null;
        }
        public GameState(GameState state)
        {
            Board = state.Board.Clone();
            turn = state.turn;
            maxMove = state.maxMove;
            minMove = state.minMove;
        }
        public void SetNextTurn(Board board)
        {
            turn++;
            this.Board = board;
            UpdateGameState();
        }
        public void UpdateGameState()
        {
            MyBaseDictionary = new Dictionary<int, Cell>();
            OppBaseDictionary = new Dictionary<int, Cell>();
            EggCells = new List<Cell>();
            CrystalCells = new List<Cell>();
            TotalMyAnts = 0;
            TotalOppAnts = 0;
            TotalCrystals = 0;
            foreach (Cell cell in Board.Cells.Values)
            {
                if (cell.BaseType == BaseType.MyBase)
                {
                    MyBaseDictionary[cell.Index] = cell;
                }
                else if (cell.BaseType == BaseType.OppBase)
                {
                    OppBaseDictionary[cell.Index] = cell;
                }
                if (cell.ResourceType == ResourceType.Egg)
                {
                    EggCells.Add(cell);
                }
                else if (cell.ResourceType == ResourceType.Crystal)
                {
                    CrystalCells.Add(cell);
                    TotalCrystals += cell.ResourceAmount;
                }
                TotalMyAnts += cell.MyAnts;
                TotalOppAnts += cell.OppAnts;
            }
        }
        public void ApplyMove(object move, bool isMax)
        {
            Move m = (Move)move;
            if (isMax)
            {
                maxMove = m;
                minMove = null;
            }
            else
            {
                if (maxMove == null)
                    throw new Exception("Expected max to play first.");
                minMove = m;
            }
            if(maxMove != null && minMove != null)
            {
                //board.ApplyMove(maxMove, true);
                //board.ApplyMove(minMove, false);
                //SetNextTurn(board);
            }
        }
        public IGameState Clone()
        {
            return new GameState(this);
        }
        public bool Equals(IGameState state)
        {
            throw new NotImplementedException();
        }
        public double Evaluate(bool isMax)
        {
            double value = 0;
            return value;
        }
        public object GetMove(bool isMax)
        {
            return true;
        }
        public IList GetPossibleMoves(bool isMax)
        {
            return new List<Move>();
        }
        public double? GetWinner()
        {
            double? winner = Board.GetWinner();
            if (this.turn == 220 & !winner.HasValue)
            {
                return 0;
            }
            return winner;
        }
    }
}
