using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace SourceCombiner
{
    public sealed class SourceCombiner
    {
        private static readonly List<string> SourceFilesToIgnore = new List<string>
        {
            "AssemblyInfo.cs"
        };

        static void Main(string[] args)
        {
            if (args == null || args.Length < 2)
            {
                Console.WriteLine("You must provide at least 2 arguments. The first is the csproj file path and the second is the output file path.");
                return;
            }

            string projectFilePath = args[0];
            string outputFilePath = args[1];

            bool openFile = false;
            if (args.Length > 2)
            {
                Boolean.TryParse(args[2], out openFile);
            }
            string projectFileLocation = args[3];

            List<string> filesToParse = GetSourceFileNames(projectFileLocation);
            Console.Error.WriteLine($"Found {filesToParse.Count} files.");
            List<string> namespaces = GetUniqueNamespaces(filesToParse, projectFileLocation);

            string outputSource = GenerateCombinedSource(namespaces, filesToParse, projectFileLocation);
            outputSource = RemoveTabSpaces(outputSource);
            outputSource = RemoveComments(outputSource);
            File.WriteAllText(outputFilePath, outputSource);

            if (openFile)
            {
                Process.Start(outputFilePath);
            }
        }

        private static string RemoveNewLine(string output)
        {
            return output.Replace(Environment.NewLine, "");
        }

        private static string RemoveTabSpaces(string output)
        {
            return output.Replace("    ", "");
        }

        public static string RemoveComments(string input)
        {
            // Pattern to match single-line and multi-line comments
            string pattern = @"(//.*?$)|(/\*.*?\*/)";

            // Use Regex to remove comments
            string result = Regex.Replace(input, pattern, string.Empty, RegexOptions.Singleline | RegexOptions.Multiline);

            return result;
        }

        private static string GenerateCombinedSource(List<string> namespaces, List<string> files, string projectFileLocation)
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(@"/*");
            sb.AppendLine($" * File generated by SourceCombiner.exe using {files.Count} source files.");
            sb.AppendLine($" * Created On: {DateTime.Now}");
            sb.AppendLine(@"*/");

            foreach (string ns in namespaces.OrderBy(s => s))
            {
                sb.AppendLine("using " + ns + ";");
            }

            foreach (string file in files)
            {
                IEnumerable<string> sourceLines = File.ReadAllLines(file);
                sb.AppendLine(@"//*** SourceCombiner -> original file " + Path.GetFileName(file) + " ***");
                string openingTag = "using ";
                foreach (string sourceLine in sourceLines)
                {
                    string trimmedLine = sourceLine.Trim().Replace("  ", " ");
                    bool isUsingDir = trimmedLine.StartsWith(openingTag) && trimmedLine.EndsWith(";");
                    if (!string.IsNullOrWhiteSpace(sourceLine) && !isUsingDir)
                    {
                        sb.AppendLine(sourceLine);
                    }
                }
            }

            return sb.ToString();
        }

        private static List<string> GetSourceFileNames(string projectFileDirectory)
        {
            List<string> files = new List<string>();



            files = Directory.GetFiles(projectFileDirectory, "*.cs", SearchOption.AllDirectories)
                .Where(fileName => !fileName.Contains("\\obj\\") && !fileName.Contains("\\bin\\") && !fileName.Contains("\\packages\\")).ToList();

            return files;
        }


        private static List<string> GetUniqueNamespaces(List<string> files, string projectFileLocation)
        {
            List<string> names = new List<string>();
            const string openingTag = "using ";
            const int namespaceStartIndex = 6;

            foreach (string file in files)
            {
                IEnumerable<string> sourceLines = File.ReadAllLines(file);

                foreach (string sourceLine in sourceLines)
                {
                    string trimmedLine = sourceLine.Trim().Replace("  ", " ");
                    if (trimmedLine.StartsWith(openingTag) && trimmedLine.EndsWith(";"))
                    {
                        string name = trimmedLine.Substring(namespaceStartIndex, trimmedLine.Length - namespaceStartIndex - 1);

                        if (!names.Contains(name))
                        {
                            names.Add(name);
                        }
                    }
                }
            }

            return names;
        }
    }
}