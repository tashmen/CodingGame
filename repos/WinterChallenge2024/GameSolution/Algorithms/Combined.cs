/*
 * File generated by SourceCombiner.exe using 18 source files.
 * Created On: 5/28/2023 8:05:44 PM
*/
using Algorithms.GameComponent;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
namespace Algorithms.GameComponent
{
    public interface IGameState
    {
        IList GetPossibleMoves(bool isMax);
        void ApplyMove(object move, bool isMax);
        object GetMove(bool isMax);
        IGameState Clone();
        double? GetWinner();
        bool Equals(IGameState state);
        double Evaluate(bool isMax);
    }
}
namespace Algorithms.Trees
{
    public class GameTreeNode
    {
        public IGameState state;
        public IList moves;
        public List<GameTreeNode> children;
        public double wins = 0;
        public double loses = 0;
        public int totalPlays = 0;
        public GameTreeNode parent;
        public bool isMax;
        public GameTreeNode(IGameState state, bool isMax, GameTreeNode parent = null)
        {
            this.state = state;
            moves = new List<object>(200);
            var possibleMoves = state.GetPossibleMoves(isMax);
            for (int i = 0; i < possibleMoves.Count; i++)
            {
                var obj = possibleMoves[i];
                moves.Add(obj);
            }
            children = new List<GameTreeNode>(200);
            this.parent = parent;
            this.isMax = isMax;
        }
        public double GetScore(bool isMax)
        {
            double totalPlays = TotalPlays();
            if (totalPlays == 0)
                return 0;
            if (isMax)
            {
                return (wins - loses) / totalPlays;
            }
            else
            {
                return (loses - wins) / totalPlays;
            }
        }
        public int TotalPlays()
        {
            return totalPlays;
        }
        public double? GetWinner()
        {
            return state.GetWinner();
        }
        public void ApplyWinner(double? winner)
        {
            if (winner.HasValue)
            {
                if (winner > 0)
                {
                    wins += winner.Value;
                }
                else if (winner < 0)
                {
                    loses += Math.Abs(winner.Value);
                }
                totalPlays++;
            }
        }
        public double Evaluate()
        {
            return state.Evaluate(isMax);
        }
    }
}
namespace Algorithms.Trees
{
    public class Minimax : TreeAlgorithm
    {
        public object GetNextMove(Stopwatch watch, int timeLimit, int depth = int.MaxValue)
        {
            double val = 99999999;
            val *= RootNode.isMax ? -1 : 1;
            object bestMove = null;
            foreach (object move in RootNode.moves)
            {
                GameTreeNode child = Expand(RootNode, move);
                double currentVal = RunMinimax(child, depth, -999999, 999999, watch, timeLimit);
                if ((RootNode.isMax && currentVal > val) || (!RootNode.isMax && currentVal < val))
                {
                    bestMove = move;
                    val = currentVal;
                }
                if (watch.ElapsedMilliseconds >= timeLimit)
                {
                    break;
                }
            }
            return bestMove;
        }
        public double RunMinimax(GameTreeNode currentNode, int depth, double alpha, double beta, Stopwatch watch, int timeLimit)
        {
            if (depth == 0 || watch.ElapsedMilliseconds >= timeLimit)
            {
                double eval = currentNode.Evaluate();
                return eval;
            }
            double? winner = currentNode.GetWinner();
            if (winner.HasValue)
            {
                return winner.Value;
            }
            if (currentNode.isMax)
            {
                double value = -99999;
                double minMax;
                foreach (object move in currentNode.moves)
                {
                    GameTreeNode childNode = Expand(currentNode, move);
                    minMax = RunMinimax(childNode, depth - 1, alpha, beta, watch, timeLimit);
                    value = Math.Max(value, minMax);
                    alpha = Math.Max(alpha, value);
                    if (alpha >= beta)
                    {
                        break;
                    }
                }
                return value;
            }
            else
            {
                double value = 99999;
                double minMax;
                foreach (object move in currentNode.moves)
                {
                    GameTreeNode childNode = Expand(currentNode, move);
                    minMax = RunMinimax(childNode, depth - 1, alpha, beta, watch, timeLimit);
                    value = Math.Min(value, minMax);
                    beta = Math.Min(beta, value);
                    if (beta <= alpha)
                    {
                        break;
                    }
                }
                return value;
            }
        }
    }
}
//*** SourceCombiner -> original file MonteCarloTreeSearch.cs ***
namespace Algorithms.Trees
{
    public class MonteCarloTreeSearch : TreeAlgorithm
    {
        private Random rand;
        private bool printErrors;
        private SearchStrategy strategy;
        public enum SearchStrategy
        {
            Random = 0,
            Sequential = 1
        }
        public MonteCarloTreeSearch(bool showErrors = true, SearchStrategy searchStrategy = SearchStrategy.Random)
        {
            rand = new Random();
            printErrors = showErrors;
            strategy = searchStrategy;
        }
        public IGameState GetRootState()
        {
            return RootNode.state;
        }
        /// <summary>
        /// Get the next move
        /// </summary>
        /// <param name="watch">timer</param>
        /// <param name="timeLimit">The amount of time to give to the search in milliseconds</param>
        /// <param name="depth">How deep to run the simulations; does not impact how deep it goes in the game tree.</param>
        /// <param name="numRollouts">The number of roll outs to play per expansion</param>
        /// <returns></returns>
        public object GetNextMove(Stopwatch watch, int timeLimit, int depth = -1, int numRollouts = 1, double? exploration = null)
        {
            if (exploration == null)
            {
                exploration = Math.Sqrt(2);
            }
            int count = 0;
            do
            {
                GameTreeNode selectedNode = SelectNodeWithUnplayedMoves(RootNode, exploration.Value);
                if (selectedNode == null)
                {
                    if (printErrors)
                        Console.Error.WriteLine("Found no more moves!");
                    break;
                }
                object move = SelectMove(selectedNode);
                GameTreeNode childNode = Expand(selectedNode, move);
                double? winner = childNode.GetWinner();
                if (winner.HasValue)
                {
                    BackPropagate(childNode, winner);
                }
                else
                {
                    for (int i = 0; i < numRollouts; i++)
                    {
                        var clonedState = childNode.state.Clone();
                        winner = SimulateGame(clonedState, watch, timeLimit, depth, childNode.isMax);
                        if (!winner.HasValue)
                            break;//We simulated a game, but it didn't end so we are out of time...
                        BackPropagate(childNode, winner);
                        count++;
                    }
                }
            }
            while (watch.ElapsedMilliseconds < timeLimit);
            if (printErrors)
                Console.Error.WriteLine($"Played {count} games!");
            GameTreeNode bestChild = null;
            double bestScore = double.MinValue;
            for (int i = 0; i < RootNode.children.Count; i++)
            {
                var child = RootNode.children[i];
                double score = child.GetScore(RootNode.isMax);
                if (bestScore < score)
                {
                    bestChild = child;
                    bestScore = score;
                }
                if (printErrors)
                    Console.Error.WriteLine($"w: {(RootNode.isMax ? child.wins : child.loses)} l: {(RootNode.isMax ? child.loses : child.wins)} total: {child.totalPlays} move: {child.state.GetMove(RootNode.isMax)} score: {score} isMax: {RootNode.isMax}");
            }
            if (printErrors)
                Console.Error.WriteLine($"Best: w: {(RootNode.isMax ? bestChild.wins : bestChild.loses)} l: {(RootNode.isMax ? bestChild.loses : bestChild.wins)} total: {bestChild.totalPlays} score: {bestScore} move: {bestChild.state.GetMove(RootNode.isMax)}");
            return bestChild.state.GetMove(RootNode.isMax);
        }
        private void BackPropagate(GameTreeNode selectedNode, double? winner)
        {
            selectedNode.ApplyWinner(winner);
            GameTreeNode tempNode = selectedNode.parent;
            while (tempNode != null)
            {
                tempNode.ApplyWinner(winner);
                tempNode = tempNode.parent;
            }
        }
        private double? SimulateGame(IGameState state, Stopwatch watch, int timeLimit, int depth, bool isMax)
        {
            double? winner;
            do
            {
                if (watch.ElapsedMilliseconds >= timeLimit)
                {
                    return null;
                }
                object move = SelectMoveAtRandom(state, isMax);
                state.ApplyMove(move, isMax);
                if (watch.ElapsedMilliseconds >= timeLimit)
                {
                    return null;
                }
                depth--;
                isMax = !isMax;
                winner = state.GetWinner();
            }
            while (!winner.HasValue && depth != 0);
            if (winner.HasValue)
            {
                return winner;
            }
            if (depth == 0)
            {
                double eval = state.Evaluate(isMax);
                if (eval > 1)
                {
                    return 1;
                }
                else if (eval < -1)
                    return -1;
                else return eval;
            }
            throw new InvalidOperationException("Could not find a winner for simulation!");
        }
        private GameTreeNode SelectNodeWithUnplayedMoves(GameTreeNode node, double exploration)
        {
            Queue<GameTreeNode> queue = new Queue<GameTreeNode>();
            queue.Enqueue(node);
            GameTreeNode tempNode;
            GameTreeNode bestNode = null;
            double maxValue = -1;
            while (queue.Count > 0)
            {
                tempNode = queue.Dequeue();
                if (tempNode.moves.Count == 0)
                {
                    for (int i = 0; i < tempNode.children.Count; i++)
                    {
                        var child = tempNode.children[i];
                        queue.Enqueue(child);
                    }
                }
                else if (tempNode.parent != null)
                {
                    double wins = RootNode.isMax ? tempNode.wins : tempNode.loses;
                    double nodeTotal = tempNode.TotalPlays();
                    double parentTotal = tempNode.parent.TotalPlays();
                    double value = wins / nodeTotal + exploration * Math.Sqrt(Math.Log(parentTotal) / nodeTotal);
                    if (value > maxValue)
                    {
                        maxValue = value;
                        bestNode = tempNode;
                    }
                }
                else return tempNode;
            }
            return bestNode;
        }
        private object SelectMoveAtRandom(IGameState state, bool isMax)
        {
            IList moves = state.GetPossibleMoves(isMax);
            if (moves.Count == 0)
            {
                throw new Exception("No moves available!");
            }
            int index = rand.Next(0, moves.Count);
            return moves[index];
        }
        private object SelectMove(GameTreeNode node)
        {
            switch (strategy)
            {
                case SearchStrategy.Random:
                    return SelectMoveAtRandom(node);
                case SearchStrategy.Sequential:
                    return SelectMoveSequentially(node);
            }
            throw new InvalidOperationException("strategy not supported");
        }
        private object SelectMoveSequentially(GameTreeNode node)
        {
            object move;
            if (node.moves.Count == 0)//If there are no more moves then that is a problem...
            {
                throw new Exception("No moves found!");
            }
            else
            {
                move = node.moves[0];
                node.moves.RemoveAt(0);
            }
            return move;
        }
        private object SelectMoveAtRandom(GameTreeNode node)
        {
            object move;
            if (node.moves.Count == 0)//If there are no more moves then that is a problem...
            {
                throw new Exception("No moves found!");
            }
            else
            {
                int index = rand.Next(0, node.moves.Count);
                move = node.moves[index];
                node.moves.RemoveAt(index);
            }
            return move;
        }
    }
}
namespace Algorithms.Trees
{
    public class TreeAlgorithm
    {
        protected GameTreeNode RootNode;
        public void SetState(IGameState rootState, bool isMax = true, bool findState = true)
        {
            if (RootNode != null && findState)
            {
                bool isFound = false;
                for (int i = 0; i < RootNode.moves.Count; i++)
                {
                    var move = RootNode.moves[i];
                    Expand(RootNode, move);
                }
                for (int i = 0; i < RootNode.children.Count; i++)
                {
                    var child = RootNode.children[i];
                    if (child.state.Equals(rootState))
                    {
                        RootNode = child;
                        isFound = true;
                        break;
                    }
                    for (int j = 0; j < child.moves.Count; j++)
                    {
                        var move = child.moves[j];
                        Expand(child, move);
                    }
                    for (int j = 0; j < child.children.Count; j++)
                    {
                        var descendent = child.children[j];
                        if (descendent.state.Equals(rootState))
                        {
                            RootNode = descendent;
                            isFound = true;
                            break;
                        }
                    }
                }
                if (!isFound)
                {
                    Console.Error.WriteLine("Could not find the next state in tree!  Starting over...");
                    RootNode = new GameTreeNode(rootState.Clone(), isMax);
                }
                else
                {
                    RootNode.parent = null;
                }
            }
            else
            {
                RootNode = new GameTreeNode(rootState.Clone(), isMax);
            }
        }
        protected GameTreeNode Expand(GameTreeNode node, object move)
        {
            IGameState nextState = node.state.Clone();
            nextState.ApplyMove(move, node.isMax);
            GameTreeNode childNode = new GameTreeNode(nextState, !node.isMax, node);
            node.children.Add(childNode);
            return childNode;
        }
    }
}
namespace Algorithms.Utility
{
    public static class BitFunctions
    {
        public static bool IsBitSet(long value, int location)
        {
            long mask = GetBitMask(location);
            return (value & mask) == mask;
        }
        public static long SetBit(long value, int location)
        {
            return value | (GetBitMask(location));
        }
        public static long ClearBit(long value, int location)
        {
            return value & (~(GetBitMask(location)));
        }
        public static long SetOrClearBit(long value, int location, bool isSet)
        {
            if (isSet)
                return SetBit(value, location);
            return ClearBit(value, location);
        }
        public static int NumberOfSetBits(long i)
        {
            i = i - ((i >> 1) & 0x5555555555555555);
            i = (i & 0x3333333333333333) + ((i >> 2) & 0x3333333333333333);
            return (int)((((i + (i >> 4)) & 0xF0F0F0F0F0F0F0F) * 0x101010101010101) >> 56);
        }
        public static long GetBitMask(int index)
        {
            return (long)1 << index;
        }
    }
}
namespace Algorithms.Space
{
    public class Point2d
    {
        public double x;
        public double y;
        public Point2d(double x, double y)
        {
            this.x = x;
            this.y = y;
        }
        public Point2d(Point2d point)
        {
            x = point.x;
            y = point.y;
        }
        public override string ToString()
        {
            return $"({x},{y})";
        }
        public override bool Equals(object objPoint)
        {
            Point2d point = objPoint as Point2d;
            return point.x == this.x && point.y == this.y;
        }
        public override int GetHashCode()
        {
            return Tuple.Create(x, y).GetHashCode();
        }
        public Point2d GetTruncatedPoint()
        {
            return new Point2d(Math.Truncate(this.x), Math.Truncate(this.y));
        }
        public Point2d GetRoundedPoint()
        {
            return new Point2d(Math.Round(this.x), Math.Round(this.y));
        }
        public Point2d GetCeilingPoint()
        {
            return new Point2d(Math.Ceiling(x), Math.Ceiling(y));
        }
        public int GetTruncatedX()
        {
            return (int)x;
        }
        public int GetTruncatedY()
        {
            return (int)y;
        }
        public double GetAngle(Point2d point)
        {
            return Math.Atan2(point.y - y, point.x - x);
        }
        public int GetManhattenDistance(Point2d point)
        {
            return (int)(Math.Abs(point.x - x) + Math.Abs(point.y - y));
        }
        public double GetDistance(Point2d point)
        {
            return GetDistance(point.x, point.y, x, y);
        }
        public Point2d GetMidPoint(Point2d point)
        {
            return GetMidPoint(point.x, point.y, x, y);
        }
        public double LengthSquared()
        {
            return x * x + y * y;
        }
        public double Length()
        {
            return Math.Sqrt(LengthSquared());
        }
        public Point2d Normalize()
        {
            var length = Length();
            if (length == 0)
            {
                x = 0;
                y = 0;
            }
            else
            {
                x /= length;
                y /= length;
            }
            return this;
        }
        public Point2d Multiply(double scalar)
        {
            x *= scalar;
            y *= scalar;
            return this;
        }
        public Point2d Add(Point2d vector)
        {
            x += vector.x;
            y += vector.y;
            return this;
        }
        public Point2d Subtract(Point2d vector)
        {
            x -= vector.x;
            y -= vector.y;
            return this;
        }
        public Point2d Truncate()
        {
            x = GetTruncatedX();
            y = GetTruncatedY();
            return this;
        }
        public Point2d SymmetricTruncate(Point2d origin)
        {
            Subtract(origin).Truncate().Add(origin);
            return this;
        }
        public Point2d GetRoundedAwayFromZeroPoint()
        {
            return new Point2d(Math.Round(x, MidpointRounding.AwayFromZero), Math.Round(y, MidpointRounding.AwayFromZero));
        }
        public Point2d Clone()
        {
            return new Point2d(x, y);
        }
        public void Fill(Point2d point)
        {
            x = point.x;
            y = point.y;
        }
        public static double GetDistance(double x1, double y1, double x2, double y2)
        {
            return Math.Sqrt(Math.Pow(x1 - x2, 2) + Math.Pow(y1 - y2, 2));
        }
        public static Point2d GetMidPoint(double x1, double y1, double x2, double y2)
        {
            return new Point2d((x1 + x2) / 2, (y1 + y2) / 2);
        }
    }
}
namespace Algorithms.Graph
{
    public class Graph
    {
        private Dictionary<int, INode> Nodes;
        //Will hold shortest paths from a start node id to an end node id
        private Dictionary<int, Dictionary<int, Tuple<double, List<ILink>>>> Paths;
        public Graph()
        {
            Nodes = new Dictionary<int, INode>();
        }
        public void AddNode(INode node)
        {
            Nodes[node.Id] = node;
        }
        /// <summary>
        /// Calculates all of the shortest paths in the node links
        /// </summary>
        public void CalculateShortestPaths()
        {
            Paths = new Dictionary<int, Dictionary<int, Tuple<double, List<ILink>>>>();
            foreach (INode vertex in Nodes.Values)
            {
                InternalBuildShortestPathsFromStartNode2(vertex);
            }
        }
        public void BuildShortestPathsFromStartNode(INode startNode, double maxDistance = double.MaxValue)
        {
            Paths = new Dictionary<int, Dictionary<int, Tuple<double, List<ILink>>>>();
            InternalBuildShortestPathsFromStartNode2(startNode, maxDistance);
        }
        //With a little help from Chat GPT improved the performance significantly.
        private void InternalBuildShortestPathsFromStartNode2(INode startNode, double maxDistance = double.MaxValue)
        {
            // Initialize exploration state and paths
            foreach (INode node in Nodes.Values)
            {
                node.IsExplored = false;
            }
            var minimumSpanningTree = new HashSet<ILink>();
            var priorityQueue = new SortedSet<(double Distance, int StepCount, ILink Link)>(Comparer<(double Distance, int StepCount, ILink Link)>.Create((a, b) =>
            {
                // Compare first by distance, then by step count (in case of tie)
                int result = a.Distance.CompareTo(b.Distance);
                if (result != 0) return result;
                result = a.StepCount.CompareTo(b.StepCount);
                if (result != 0) return result;
                return a.Link.EndNodeId.CompareTo(b.Link.EndNodeId);
            }));
            Paths[startNode.Id] = new Dictionary<int, Tuple<double, List<ILink>>>();
            Paths[startNode.Id][startNode.Id] = Tuple.Create(0.0, new List<ILink>());
            startNode.IsExplored = true;
            // Add initial links of the startNode to the priority queue
            foreach (var link in startNode.GetLinks())
            {
                priorityQueue.Add((link.Distance, 1, link));  // Distance, StepCount (1), Link
            }
            while (minimumSpanningTree.Count < Nodes.Count && priorityQueue.Count > 0)
            {
                // Get the link with the minimum distance and fewest steps
                var (currentDist, stepCount, bestLink) = priorityQueue.Min;
                priorityQueue.Remove(priorityQueue.Min);
                var currentNode = Nodes[bestLink.StartNodeId];
                var adjacentNode = Nodes[bestLink.EndNodeId];
                if (adjacentNode.IsExplored)
                {
                    continue; // Skip already explored nodes
                }
                adjacentNode.IsExplored = true;
                minimumSpanningTree.Add(bestLink);
                // Update paths
                if (!Paths[startNode.Id].TryGetValue(currentNode.Id, out var currentPath))
                {
                    currentPath = Tuple.Create(0.0, new List<ILink>());
                }
                else
                {
                    currentPath = Tuple.Create(currentDist, new List<ILink>(currentPath.Item2)); // Copy the existing path
                }
                // Add the new link to the current path
                currentPath.Item2.Add(bestLink);
                // Store the complete path from the start node to the adjacent node
                Paths[startNode.Id][bestLink.EndNodeId] = currentPath;
                // Exit if the distance exceeds the maximum allowed
                if (currentDist >= maxDistance)
                    return;
                // Add adjacent links of the newly explored node to the queue
                foreach (ILink adjacentLink in adjacentNode.GetLinks())
                {
                    var nextNode = Nodes[adjacentLink.EndNodeId];
                    if (!nextNode.IsExplored)
                    {
                        // Calculate the new distance and step count for the adjacent link
                        double newDist = currentDist + adjacentLink.Distance;
                        int newStepCount = stepCount + 1;
                        priorityQueue.Add((newDist, newStepCount, adjacentLink));
                    }
                }
            }
        }
        /*
        private void InternalBuildShortestPathsFromStartNode(INode startNode, double maxDistance = double.MaxValue)
        {
        foreach (INode node in Nodes.Values)
        {
        node.IsExplored = false;
        }
        List<ILink> minimumSpanningTree = new List<ILink>();
        Paths[startNode.Id] = new Dictionary<int, Tuple<double, List<ILink>>>();
        Paths[startNode.Id][startNode.Id] = Tuple.Create(0.0, new List<ILink>());
        minimumSpanningTree.Add(new Link(startNode.Id, startNode.Id, 0));
        startNode.IsExplored = true;
        int vertexCount = Nodes.Count;
        double currentDist;
        while (minimumSpanningTree.Count < vertexCount)
        {
        double minDist = 99999;
        ILink bestLink = null;
        ILink parentLink = null;
        foreach (ILink currentLink in minimumSpanningTree)
        {
        INode currentNode = Nodes[currentLink.EndNodeId];
        currentDist = currentLink.GetDistance(Paths[startNode.Id][currentNode.Id]);
        foreach (ILink adjacent in currentNode.GetLinks())
        {
        INode adjacentNode = Nodes[adjacent.EndNodeId];
        if (adjacentNode.IsExplored)
        {
        continue;//skip nodes already in minimum spanning tree
        }
        double distance = currentDist + adjacent.Distance;
        if (distance < minDist)
        {
        minDist = distance;
        bestLink = adjacent;
        parentLink = currentLink;
        }
        else if (distance == minDist)//When the distances are equivalent pick the one with the shortest path
        {
        Paths[startNode.Id].TryGetValue(currentNode.Id, out List<ILink> pathCurrent);
        int lengthCurrent = pathCurrent == null ? 0 : pathCurrent.Count;
        Paths[startNode.Id].TryGetValue(parentLink.EndNodeId, out List<ILink> pathPrevious);
        int lengthPrevious = pathPrevious == null ? 0 : pathPrevious.Count;
        if (lengthCurrent < lengthPrevious)
        {
        minDist = distance;
        bestLink = adjacent;
        parentLink = currentLink;
        }
        }
        }
        }
        if (parentLink == null)
        {
        return;//no possible paths
        }
        minimumSpanningTree.Add(bestLink);
        Nodes[bestLink.EndNodeId].IsExplored = true;
        List<ILink> currentPath = null;
        if (!parentLink.EndNodeId.Equals(startNode.Id))
        {
        Paths[startNode.Id].TryGetValue(parentLink.EndNodeId, out currentPath);
        }
        if (currentPath == null)
        {
        currentPath = new List<ILink>();
        }
        else
        {
        currentPath = new List<ILink>(currentPath);
        }
        Paths[startNode.Id].Add(bestLink.EndNodeId, currentPath);
        currentPath.Add(bestLink);
        if (minDist >= maxDistance)
        return;
        }
        }
        */
        /// <summary>
        /// Retrieves the next node along the path from start to end
        /// </summary>
        /// <param name="startId">The starting node id</param>
        /// <param name="endId">The ending node id</param>
        /// <returns>The next node in the path</returns>
        public INode GetNextNodeInShortestPath(INode startNode, INode endNode)
        {
            Paths.TryGetValue(startNode.Id, out Dictionary<int, Tuple<double, List<ILink>>> endPoints);
            if (endPoints == null)
            {
                Console.Error.WriteLine("|||Start not found: " + startNode.Id);
                throw new InvalidOperationException();
            }
            endPoints.TryGetValue(endNode.Id, out Tuple<double, List<ILink>> paths);
            if (paths == null)
            {
                Console.Error.WriteLine("|||End not found: " + endNode.Id + " start: " + startNode.Id);
                throw new InvalidOperationException();
            }
            INode shortest = Nodes[paths.Item2.First().EndNodeId];
            Console.Error.WriteLine("|||Shortest: " + shortest + " from: " + startNode.Id + " to: " + endNode.Id);
            return shortest;
        }
        /// <summary>
        /// Retrieves all nodes along the shortest path between two points
        /// </summary>
        /// <param name="startNodeId">Start node id</param>
        /// <param name="endNodeId">End node id</param>
        /// <returns>The full path from start to end</returns>
        /// <exception cref="InvalidOperationException"></exception>
        public IList<ILink> GetShortestPathAll(int startNodeId, int endNodeId)
        {
            Paths.TryGetValue(startNodeId, out Dictionary<int, Tuple<double, List<ILink>>> endPoints);
            if (endPoints == null)
            {
                Console.Error.WriteLine("|||Start not found: " + startNodeId);
                throw new InvalidOperationException();
            }
            endPoints.TryGetValue(endNodeId, out Tuple<double, List<ILink>> paths);
            if (paths == null)
            {
                Console.Error.WriteLine("|||End not found: " + endNodeId + " start: " + startNodeId);
                throw new InvalidOperationException();
            }
            return paths.Item2;
        }
        /// <summary>
        /// Retrieves the distance following the shortest path from start to end.
        /// </summary>
        /// <param name="startId">The starting node</param>
        /// <param name="endId">The ending node</param>
        /// <returns>The distance along the shortest path</returns>
        public double GetShortestPathDistance(INode startNode, INode endNode)
        {
            return GetShortestPathDistance(startNode.Id, endNode.Id);
        }
        /// <summary>
        /// Retrieves the distance following the shortest path from start to end.
        /// </summary>
        /// <param name="startId">The starting node id</param>
        /// <param name="endId">The ending node id</param>
        /// <returns>The distance along the shortest path</returns>
        public double GetShortestPathDistance(int startId, int endId)
        {
            Paths.TryGetValue(startId, out Dictionary<int, Tuple<double, List<ILink>>> endPoints);
            if (endPoints == null)
            {
                return double.MaxValue;
            }
            endPoints.TryGetValue(endId, out Tuple<double, List<ILink>> paths);
            if (paths == null)
            {
                return double.MaxValue;
            }
            return paths.Item1;
        }
        /// <summary>
        /// Retrieves the straight line distance from start to end
        /// </summary>
        /// <param name="startId">The starting node</param>
        /// <param name="endId">The ending node</param>
        /// <returns>The distance from start to end</returns>
        public double GetDistance(Node startNode, Node endNode)
        {
            return startNode.GetLinks().Where(l => l.EndNodeId.Equals(endNode.Id)).First().Distance;
        }
    }
}
//*** SourceCombiner -> original file GraphLinks.cs ***
namespace Algorithms.Graph
{
    public class GraphLinks
    {
        public class Node
        {
            public int Id;
            public double Distance;
            public bool IsExplored;
            public Node(int id, double distance)
            {
                Id = id;
                Distance = distance;
            }
            /// <summary>
            /// Creates a clone of the node from the current distance.  This is used while building the minimum spanning tree.
            /// </summary>
            /// <param name="currentDist">The current distance from the starting node</param>
            /// <returns>A clone of the node with the proper distance</returns>
            public Node CreateAtDistance(double currentDist)
            {
                return new Node(Id, currentDist + Distance);
            }
        }
        private Dictionary<int, List<Node>> Links;
        private Dictionary<int, Dictionary<int, List<Node>>> Paths;
        private bool IsByDirectional;
        public GraphLinks(bool isByDirectional = true)
        {
            Links = new Dictionary<int, List<Node>>();
            IsByDirectional = isByDirectional;
        }
        public bool ContainsLink(int id1, int id2)
        {
            return Links.ContainsKey(id1) && Links[id1].Where(n => n.Id == id2).Any();
        }
        /// <summary>
        /// Adds a link to the list
        /// </summary>
        /// <param name="id1">First id</param>
        /// <param name="id2">Second id</param>
        /// <param name="distance">The distance between the two nodes</param>
        public void AddLink(int id1, int id2, double distance)
        {
            //Console.Error.WriteLine(id1 + " " + id2 + " " + distance);
            if (ContainsLink(id1, id2))
                return;
            AddLinkInternal(id1, id2, distance);
            if (IsByDirectional)
                AddLinkInternal(id2, id1, distance);
        }
        public void RemoveLink(int id1, int id2)
        {
            Links[id1].RemoveAll(n => n.Id == id2);
            Links[id2].RemoveAll(n => n.Id == id1);
        }
        /// <summary>
        /// Calculates all of the shortest paths in the node links
        /// </summary>
        public void CalculateShortestPaths()
        {
            Paths = new Dictionary<int, Dictionary<int, List<Node>>>();
            List<int> vertices = Links.Keys.ToList();
            int vertexCount = vertices.Count;
            foreach (int vertex in vertices)
            {
                CalculateShortestPathFromStartNode(vertex, vertexCount, 9999999);
            }
        }
        /// <summary>
        /// Calculates the shortest paths from a start node
        /// </summary>
        /// <param name="startNode">id of the start node</param>
        /// <param name="maxDistance">the fartheset distance to travel</param>
        public void CalculateShortestPathsFromStartNode(int startNode, int maxDistance)
        {
            Paths = new Dictionary<int, Dictionary<int, List<Node>>>();
            CalculateShortestPathFromStartNode(startNode, Links.Keys.Count, maxDistance);
        }
        /// <summary>
        /// Calculates the shortest paths from the start node to all other nodes
        /// </summary>
        /// <param name="startNode">The starting id</param>
        /// <param name="vertexCount">The number of nodes</param>
        /// <param name="maxDistance">the farthest distance to travel</param>
        private void CalculateShortestPathFromStartNode(int startNode, int vertexCount, int maxDistance)
        {
            List<Node> minimumSpanningTree = new List<Node>();
            //Console.Error.WriteLine("Starting with " + startNode);
            double currentDist = 0;
            Paths[startNode] = new Dictionary<int, List<Node>>();
            minimumSpanningTree.Add(new Node(startNode, currentDist));
            while (minimumSpanningTree.Count < vertexCount)
            {
                double minDist = 99999;
                Node bestNode = null;
                Node parentNode = null;
                foreach (Node currentNode in minimumSpanningTree)
                {
                    currentDist = currentNode.Distance;
                    //Console.Error.WriteLine("Inspecting: " + currentNode.FactoryId + " distance " + currentDist);
                    foreach (Node adjacent in GetLinks(currentNode.Id))
                    {
                        if (adjacent.IsExplored || minimumSpanningTree.Where(n => n.Id == adjacent.Id).Any())
                        {
                            adjacent.IsExplored = true;
                            continue;//skip nodes already in minimum spanning tree
                        }
                        double distance = currentDist + adjacent.Distance;
                        if (distance < minDist)
                        {
                            minDist = distance;
                            bestNode = adjacent.CreateAtDistance(currentDist);
                            parentNode = currentNode;
                        }
                        else if (distance == minDist)//When the distances are equivalent pick the one with the shortest path
                        {
                            Paths[startNode].TryGetValue(currentNode.Id, out List<Node> pathCurrent);
                            int lengthCurrent = pathCurrent == null ? 0 : pathCurrent.Count;
                            Paths[startNode].TryGetValue(parentNode.Id, out List<Node> pathPrevious);
                            int lengthPrevious = pathPrevious == null ? 0 : pathPrevious.Count;
                            if (lengthCurrent < lengthPrevious)
                            {
                                minDist = distance;
                                bestNode = adjacent.CreateAtDistance(currentDist);
                                parentNode = currentNode;
                            }
                        }
                    }
                }
                if (parentNode == null)
                {
                    return;//no possible paths
                }
                minimumSpanningTree.Add(bestNode);
                List<Node> currentPath = null;
                if (parentNode.Id != startNode)
                {
                    Paths[startNode].TryGetValue(parentNode.Id, out currentPath);
                }
                if (currentPath == null)
                {
                    currentPath = new List<Node>();
                }
                else
                {
                    currentPath = new List<Node>(currentPath);
                }
                Paths[startNode].Add(bestNode.Id, currentPath);
                currentPath.Add(bestNode);
                /*
                if (startNode == 0)
                {
                Console.Error.WriteLine("Parent node: " + parentNode.FactoryId + " distance: " + parentNode.Distance);
                Console.Error.WriteLine("Shortest Node: " + bestNode.FactoryId + " distance: " + bestNode.Distance);
                }
                */
                if (minDist >= maxDistance)
                    return;
            }
        }
        /// <summary>
        /// Retrieves the links that are adjacent to the given node
        /// </summary>
        /// <param name="id">The node id</param>
        /// <returns></returns>
        public List<Node> GetLinks(int id)
        {
            return Links[id];
        }
        public Dictionary<int, List<Node>> GetPaths(int startId)
        {
            return Paths[startId];
        }
        /// <summary>
        /// Retrieves the straight line distance from start to end
        /// </summary>
        /// <param name="startId">The starting node id</param>
        /// <param name="endId">The ending node id</param>
        /// <returns>The distance from start to end</returns>
        public double GetDistance(int startId, int endId)
        {
            return GetLinks(startId).Where(l => l.Id == endId).First().Distance;
        }
        /// <summary>
        /// Retrieves the distance following the shortest path from start to end.
        /// </summary>
        /// <param name="startId">The starting node id</param>
        /// <param name="endId">The ending node id</param>
        /// <returns>The distance along the shortest path</returns>
        public double GetShortestPathDistance(int startId, int endId)
        {
            Paths.TryGetValue(startId, out Dictionary<int, List<Node>> endPoints);
            if (endPoints == null)
            {
                return 99999;
            }
            endPoints.TryGetValue(endId, out List<Node> paths);
            if (paths == null)
            {
                return 99999;
            }
            return paths.Last().Distance;
        }
        /// <summary>
        /// Retrieves the next node along the path from start to end
        /// </summary>
        /// <param name="startId">The starting node id</param>
        /// <param name="endId">The ending node id</param>
        /// <returns>The factory id that is first in the path</returns>
        public int GetShortestPath(int startId, int endId)
        {
            Paths.TryGetValue(startId, out Dictionary<int, List<Node>> endPoints);
            if (endPoints == null)
            {
                Console.Error.WriteLine("|||Start not found: " + startId);
                throw new InvalidOperationException();
            }
            endPoints.TryGetValue(endId, out List<Node> paths);
            if (paths == null)
            {
                Console.Error.WriteLine("|||End not found: " + endId + " start: " + startId);
                throw new InvalidOperationException();
            }
            int shortest = paths.First().Id;
            Console.Error.WriteLine("|||Shortest: " + shortest + " from: " + startId + " to: " + endId);
            return shortest;
        }
        /// <summary>
        /// Retrieves the full path from start to end
        /// </summary>
        /// <param name="startId">the start id</param>
        /// <param name="endId">the end id</param>
        /// <returns>The full path</returns>
        public List<Node> GetShortestPathAll(int startId, int endId)
        {
            Paths.TryGetValue(startId, out Dictionary<int, List<Node>> endPoints);
            if (endPoints == null)
            {
                Console.Error.WriteLine("|||Start not found: " + startId);
                throw new InvalidOperationException();
            }
            endPoints.TryGetValue(endId, out List<Node> paths);
            if (paths == null)
            {
                Console.Error.WriteLine("|||End not found: " + endId + " start: " + startId);
                throw new InvalidOperationException();
            }
            return paths;
        }
        //Adds links to the node links
        private void AddLinkInternal(int startNode, int endNode, double distance)
        {
            List<Node> nodeLinks;
            if (Links.ContainsKey(startNode))
            {
                nodeLinks = Links[startNode];
            }
            else
            {
                nodeLinks = new List<Node>();
                Links[startNode] = nodeLinks;
            }
            nodeLinks.Add(new Node(endNode, distance));
        }
    }
}
//*** SourceCombiner -> original file INode.cs ***
namespace Algorithms.Graph
{
    public interface INode
    {
        int Id { get; }
        bool IsExplored { get; set; }
        List<ILink> GetLinks();
    }
    public class Node : INode
    {
        public int Id { get; private set; }
        public bool IsExplored { get; set; }
        private List<ILink> Links;
        public Node(int id)
        {
            Id = id;
            IsExplored = false;
            Links = new List<ILink>();
        }
        public void AddLink(ILink link)
        {
            Links.Add(link);
        }
        public List<ILink> GetLinks()
        {
            return Links;
        }
        public bool Equals(INode node)
        {
            return node.Id == Id;
        }
    }
    public interface ILink
    {
        int StartNodeId { get; }
        int EndNodeId { get; }
        double Distance { get; }
        double GetDistance(List<ILink> currentPath);
    }
    public class Link : ILink
    {
        public int StartNodeId { get; private set; }
        public int EndNodeId { get; private set; }
        public double Distance { get; private set; }
        public Link(int startNodeId, int endNodeId, double distance)
        {
            StartNodeId = startNodeId;
            EndNodeId = endNodeId;
            Distance = distance;
        }
        public Link(INode startNode, INode endNode, double distance)
        {
            StartNodeId = startNode.Id;
            EndNodeId = endNode.Id;
            Distance = distance;
        }
        public double GetDistance(List<ILink> currentPath)
        {
            double distance = 0;
            foreach (ILink link in currentPath)
            {
                distance += link.Distance;
            }
            return distance;
        }
    }
}